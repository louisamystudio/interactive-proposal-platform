Absolutely—I get it. We must keep two different pipelines straight:

Construction cost (the minimum cost to build) → budget math and Shell / Interior / Landscape shares, then Shell → discipline components (Architecture, Structural, MEP, etc.).

Design fees (what Louis Amy is quoting) → Top-Down (market %) vs Bottom-Up (hours × blended cost), then Contract = max(discounted market, LA).

Below I point to the exact places where each pipeline is calculated in the current code, show how they map to your spreadsheet formulas, and call out what must not be mixed. I also include the DB sources for ranges, shares, and constants so the agent can trace every number end-to-end.

A) Construction cost (minimum cost to build)
1) Total budget and high-level shares (Shell / Interior / Landscape)

Where it’s computed: calculateBudgets

Computes newBudget, remodelBudget from area × (target PSF × multipliers)
github.com
.

Normalizes project shares and splits the totalBudget into shellBudget / interiorBudget / landscapeBudget
github.com
github.com
.

DB sources you expect in code/UI:

Cost bands (min/target/max) for New & Remodel come from the PR cost index (per Use/Type/Tier) and drive the PSF sliders in UI. Those ranges live in pr_construction_cost_index_2025 (shell/interior/landscape bands)
github.com
github.com
 and in the seed CSV/SQL you provided previously .

Category multipliers (1→0.9 … 5→1.3) are in category_multipliers .

How this matches your spreadsheet:
Your lines:

New Construction Budget = NewArea × NewTargetPSF / Existing = ExistingArea × RemodelTargetPSF.

Then TotalBudget = New + Existing and split into Project Shell/Interior/Landscape Share.

That’s exactly the calculateBudgets pipeline—no fee math is applied here (that comes later).

2) Break the Shell budget into discipline components

Where it’s computed: calculateDisciplineBudgets

Each engineering discipline = shellBudget × disciplineDesignShare;

Architecture = remainder of Shell after all engineering sums
github.com
.

Where discipline shares come from:

The service layer reads row fields like structural_design_share_pct, mechanical_design_share_pct, etc., dividing by 100 to produce decimal shares that the engine consumes
github.com
.

How this matches your spreadsheet:
Your “Engineering_Costs VLOOKUP × Shell Share” logic (e.g., Structural Design Share = VLOOKUP(...)*ShellShare) is implemented by reading the row, converting % to decimals, and multiplying by shellBudget. Architecture card is the remainder card (Shell − Σ engineering), just like your =1−SUM(engineeringShares).

✅ Key separation: everything above is construction cost. No hours, no discount, no fee multipliers appear in this path.

B) Design fees (what Louis Amy is quoting)
3) Hours (for Bottom-Up)

Where it’s computed: calculateProjectHours

Non-linear hours curve with calibrated offset and category factor
github.com
:

base = 0.21767 + 11.21274 × (totalArea)^(-0.53816)
alt  = base − HFA_OFFSET
newHours     = alt × 0.9 × categoryMultiplier × newArea
remodelHours = alt × 0.77 × categoryMultiplier × existingArea


Constants (HFA_OFFSET, HOURS_*, NEW/REMODEL factors) are in calculation_constants seeds .

Spreadsheet mapping: your “Project Hours & Leverage” section: the same formula and per-phase/role distributions. (Admin-only visuals.)

4) Fees (Top-Down vs Bottom-Up) and Contract

Where it’s computed: calculateFees

Top-Down (Market %) = totalBudget × MARKET_FEE_RATE × categoryMultiplier
github.com
.

Bottom-Up (Louis Amy) = totalHours × (AVG_LABOR_RATE + AVG_OVERHEAD_RATE) × MARKUP
github.com
.

Contract = max(market × (1−MAX_DISCOUNT), louisAmy)
github.com
.

All constants (fee rate, discount cap, labor/overhead, markup) are in calculation_constants , and category multipliers in category_multipliers .

Spreadsheet mapping: This is your “Top-Down Summary” (market % of construction) vs “Bottom-Up Summary” (hours × rates × overhead) with a discount slider and final Contract Price. Again, this is fee math, not construction cost.

✅ Key separation: fees are derived from construction budget (Top-Down) or hours (Bottom-Up). They do not alter the construction budget breakdown. The UI must never present fee outputs as if they were construction components.

C) “Spot the difference” checklist for your agent

To make sure we never confuse construction cost components with fee components, instruct the agent to respect these section boundaries in the Admin dashboard:

Construction Budget (minimum cost to build) — use only:

calculateBudgets outputs: newBudget, remodelBudget, totalBudget, shellBudget, interiorBudget, landscapeBudget
github.com
.

calculateDisciplineBudgets outputs: Architecture (remainder), Structural, Civil, Mechanical, Electrical, Plumbing, Telecom
github.com
.

DB anchors for PSF and shares: PR cost index row (Use/Type/Tier) for bands and defaults
github.com
; normalize shares (e.g., 66/22/12).
Never display hours, rates, discounts, or “contract” in this section.

Design Fee Analysis (top-down & bottom-up) — use only:

calculateProjectHours → total hours and phase/role distributions (Admin-only charts)
github.com
.

calculateFees → marketFee, louisAmyFee, contractPrice = max(discounted market, LA)
github.com
.

Fee constants & category multipliers from DB seeds (exact values) .
Never relabel these values as “Shell/Interior/Discipline” or draw them in the construction charts.

D) Mapping your Excel lines → current code (quick index)

Area & PSF sliders → budgets: spreadsheet rows B16–B24 → calculateBudgets (areas, target PSF, multipliers, normalize shares)
github.com
github.com
.

Shell/Interior/Landscape cards: B29–B37 → the 3 outputs from calculateBudgets.

Shell → disciplines: B39–B47 and B58–B74 → calculateDisciplineBudgets (Architecture remainder rule)
github.com
; discipline % come from PR index row fields (converted to decimals)
github.com
.

Hours (non-linear): B114–B117 → calculateProjectHours with HFA_OFFSET and category factor
github.com
; constants in seeds .

Top-Down vs Bottom-Up fee tables & Contract: D84–D94, E174/E175 & discount block → calculateFees (market % vs hours cost; contract = max after discount cap)
github.com
; constants & multipliers in seeds .

E) Guardrails for the UI (what to show where)

Admin: full fidelity—PSF sliders, budget donuts, discipline remainder cards, Top-Down vs Bottom-Up tables, discount slider, phase/role charts.

Client: never show hours/rates/discounts. Show Option A/B/C (A first), scope bullets, and a client-safe budget donut (e.g., Scan-to-BIM, Building Shell, Interior, Landscape). Keep fee mechanics internal.

F) Quick visual acceptance tests for the agent

Construction only: Architecture + Structural + Civil + Mechanical + Electrical + Plumbing + Telecom == Shell (±$1).

Fee only: contractPrice == max(marketFee × (1−MAX_DISCOUNT), louisAmyFee).

Separation: No fee numbers (hours, rates, discount, contract) appear in Construction Budget section or discipline cards.

DB parity: category multipliers = {0.9, 1.0, 1.1, 1.2, 1.3} for categories 1–5 ; cost bands & discipline shares match PR row for selected Use/Type/Tier ; constants match seeds (labor/overhead/markup/HFA/fee rate/discount cap) .

Bottom line

Shell breakdown into construction components lives in calculateBudgets (budgets & shares) and calculateDisciplineBudgets (Shell→disciplines; Architecture = remainder)
github.com
github.com
.

Fees into components (Top-Down scopes vs Bottom-Up team/phase) live in calculateProjectHours and calculateFees—a separate pipeline that never touches the construction cards
github.com
github.com
.
Keeping those two pipelines visually and semantically separated is the key to preventing any confusion between minimum construction cost and Louis Amy’s design fee.

Worked for 2 minutes

In the workbook you provided, there are two distinct pipelines that should never be conflated:

Construction cost breakdown – this calculates the minimum budget required to build the project. It pulls PSF bands and default shares from your “Cost_Ranges” and “Engineering_Costs” tables, then splits the total construction budget into New vs. Existing, and into Shell / Interior / Landscape. From the Shell budget it further allocates dollars to each discipline (Structural, Civil, MEP, Telecom), with Architecture defined as the remainder. In code, this corresponds to the calculateBudgets and calculateDisciplineBudgets functions: they multiply areas by target PSF values and normalize shares
github.com
github.com
. These functions never use hours, rates, or discounts.

Design fee calculation – this determines how much Louis Amy will charge for professional services. It uses a totally separate set of formulas: non‑linear hours curves, average labour rates, overhead and markup, and a market‑percentage fee. In code, this is handled by calculateProjectHours and calculateFees, which compute hours and fees based on constants and category multipliers
github.com
github.com
. The result is the Top‑Down market fee, Bottom‑Up Louis Amy fee, and the final Contract Price (max of the two after applying a discount cap).

Looking at your spreadsheet:

Rows up to “Working Minimum Budget” (B29 through B74) are the construction‑cost pipeline. They use lookups from Cost_Ranges to set PSF bands, default Shell/Interior/Landscape shares, then multiply those shares by the construction budget to compute Shell, Interior, Landscape, and discipline budgets. For example, Structural Design Share = VLOOKUP(…, "Structural") * Shell share – these are dollars for the building, not design fees.

Rows starting with “Category Multiplier” and the 8‑column fee table shift to the fee pipeline. Here formulas such as 0.6 + 0.006 * ((1000+B8)/1000000)^(-0.7495) and ((0.07498+0.007824*(…))*B79*B77*0.95) are computing market rates per sq‑ft, approximate hours, and labor cost plus overhead. Later, the “Project Hours & Leverage” section computes hours by phase and role, and the “Market Price / Bottom‑Up Summary / Discounted Final Price” section determines the final design fee. None of these formulas feed back into the Shell/Interior/Landscape budgets.

So the error you’ve been seeing arises when the app treats the discipline shares (which are percentages of the total project) as if they were already percentages of the Shell budget, which makes the Architecture remainder too large. The fix is to convert those shares to “percent of Shell” (divide each discipline share by the Shell share before multiplying) when computing construction budgets
github.com
—and to keep the fee calculations completely separate
github.com
.