Here‚Äôs a clean, actionable version you can send to the agent. It keeps your original points, but adds file targets, acceptance criteria, and sequencing so they can ship without guesswork.

---

# Admin ‚Üí Client Proposal Platform: Action Plan

## üî¥ Blockers ‚Äî fix first

**1) Type errors (compiler must be green)**

* **What:**

  * `OptionCards`: remove or type the `notIncluded` prop (it isn‚Äôt in `Option`); either extend the type or delete the reference.
  * Admin calculator: fix the type mismatch at line \~360 (likely a narrowed union or number/string from slider state).
* **Where:**

  * `components/client/OptionCard.tsx` (or equivalent), `lib/types.ts`
  * `app/admin/calculator/page.tsx` (or wherever line 360 falls)
* **Done when:** `pnpm build` passes with zero TS errors.

**2) CORS in dev**

* **What:** add `allowedDevOrigins` to your Next config and use it in API routes (or set `headers()` in route handlers); confirm local + Replit/Vercel origins allowed.
* **Where:** `next.config.js` (plus any route handlers calling external origins)
* **Done when:** dev console/network shows **no** blocked cross-origin requests.

---

## üóÑÔ∏è Database & Persistence (must-have)

**3) Supabase schema**

* **Tables:**

  * `building_cost_data` (PSF min/target/max, default shares)
  * `category_multipliers`
  * `proposals` (JSONB: inputs, results, options, `token`, timestamps)
  * `proposal_events` (proposal\_id, event\_type, event\_data, ts)
* **RLS:** token-based read for `proposals`; unrestricted writes from server routes only.
* **Done when:** schema created & seeded; `select * from proposals` shows rows after a test POST.

**4) Proposal persistence**

* **What:** implement `POST /api/proposals` to recompute with SSOT, insert a row, and return `{ token }`; add `GET /api/proposals/[token]` (server) that returns a **client-safe** DTO (no hours/rates/discount/margin).
* **Where:** `app/api/proposals/route.ts` (+ `[token]/route.ts` or server loader in `/proposal/[token]`)
* **Done when:**

  * Admin ‚ÄúGenerate Proposal‚Äù returns a URL like `/proposal/<token>`
  * Visiting the token URL renders the client page with **only** client-safe fields.

&#x20;(SSOT outputs & admin‚Üíclient narrative) ‚Ä¢  (UI/story order & sectioning)

---

## üìà Analytics (must-have for launch)

**5) Event tracking**

* **What:** log `opened`, `option_viewed`, `cta_clicked` to `proposal_events`; add a tiny `trackEvent()` helper.
* **Where:**

  * API: `app/api/proposals/[id]/events/route.ts` (or subroute)
  * Client: `lib/analytics.ts`
* **Done when:** selecting Option A/B/C and clicking CTA writes rows you can query in Supabase.

---

## üé® UX / UI Enhancements (admin first, then client)

**6) Admin loading & errors**

* **What:** replace infinite spinners with skeletons; add 10s fetch timeout and a friendly error banner.
* **Where:** shared `components/ui/*` (Skeleton), error boundaries on admin route.
* **Done when:** no indefinite spinners; network failures show a non-blocking banner with ‚ÄúRetry‚Äù.

**7) Mobile pass**

* **What:** verify touch interactions on charts, card stacking, and tap targets; reduce heavy work above the fold.
* **Done when:** Lighthouse Mobile ‚â•90; charts render <500 ms.

---

## ‚úÖ QA Gates (promote only when green)

**8) Acceptance tests**

* **Math parity:** 4,407 ft¬≤ √ó \$195/ft¬≤ = **\$859,365** (fixture)
* **Client safety:** the **client HTML/JSON** must not contain the strings: `hour`, `rate`, `discount`, `overhead`, `markup`
* **Perf:** TTI < 3 s on mid-tier mobile; charts < 500 ms
* **Where:** `tests/e2e/*.spec.ts` + unit tests for calc parity

**9) Missing from mock-up parity**

* **Cost bands:** dual PSF sliders with **min/target/max** and **DB default ticks**
* **Advanced Settings:** collapsible ‚ÄúDefaults & Overrides‚Äù card
* **Export PDF:** queue as post-MVP (after tokenized proposals)
* **Email notifications:** queue post-MVP

---

## üöÄ Deployment Readiness

**10) Env & healthcheck**

* **What:** set `NEXT_PUBLIC_SUPABASE_URL`, `NEXT_PUBLIC_SUPABASE_ANON_KEY`, `SUPABASE_SERVICE_ROLE_KEY`; add `/api/health` returning `{ ok: true }`.
* **Done when:** deploy smoke check passes; DB reachable from production.

---

# File-level ‚ÄúDo-This-Now‚Äù Checklist

**Admin**

* `components/admin/DisciplineCards.tsx`

  * Compute Architecture = Shell ‚àí Œ£(engineering)
  * Expander: show New vs Remodel subtotals
  * Acceptance: remainder math within ¬±\$1
* `components/admin/BudgetAllocationCard.tsx`

  * Normalize shares (defaults 66/22/12); show \$ **and** %; update donut + list together
* `components/admin/ProposalExport.tsx` ‚Üí `POST /api/proposals`

  * Copy link to clipboard, toast success

**Client**

* `app/proposal/[token]/page.tsx` (server component)

  * Render: `OptionComparison` (A first), `BudgetDonut` (client-safe buckets), `ProofOfPrecision` (Nira/imagery), `ConversionCTA`
  * Fetch: server-side **trimmed DTO** only

**Analytics**

* `lib/analytics.ts`, `app/api/proposals/[id]/events/route.ts`

**DB**

* Supabase SQL for the four tables + RLS policy (token read on `proposals`)

**QA**

* Add Playwright spec: client page must **not** include `hour|rate|discount|overhead|markup` (regex)
* Fixture: budget = \$859,365; Shell 66 % / Interior 22 % / Landscape 12 %

---

## Notes for the agent

* The **core UI** (FeeComparison, HoursBreakdown, Options) is in good shape; the remaining work is wiring **persistence**, **discipline remainder logic**, **normalized budget display**, and the **client route**.
* The **SSOT** engine is the source for budgets, disciplines, hours and fees; **never** re-compute in components (keeps parity and avoids drift).&#x20;
* The narrative order and admin/client split must follow the blueprint: **Project definition ‚Üí Construction budget (minimum build cost) ‚Üí Fee analysis (Top-Down vs Bottom-Up) ‚Üí Sanity & discount ‚Üí Phases/Roles (admin-only) ‚Üí Options ‚Üí Export client-safe token**.&#x20;

If you want, I can draft the minimal `route.ts` for `/api/proposals` (insert + token) and a `toClientSafe(dto)` helper next, so you can paste-in and test end-to-end immediately.


Here is a polished summary that folds the outstanding tasks into the narrative framework described in your blueprint, so you can append it to your prior report:

---

## üöß What still needs to be done

### 1. Fix compile‚Äëblocking type errors

The **OptionCards component** should not reference a `notIncluded` property on the `Option` type. Remove or re‚Äëtype this prop so TypeScript passes. Similarly, resolve the type mismatch at \~line 360 of the admin calculator page (likely a number/string mismatch from the slider state). The build should succeed without errors when these are addressed.

### 2. Configure allowedDevOrigins for CORS

Dev logs show cross‚Äëorigin requests being blocked. Update your Next.js config to define `allowedDevOrigins` (or set appropriate response headers in your API routes) so the dev server accepts calls from your local and Replit origins.

### 3. Create Supabase schema and security

To move beyond in‚Äëmemory mode, you must create and seed the following tables:

* `building_cost_data` and `category_multipliers` for storing PSF ranges and multipliers,
* `proposals` (with JSON columns for inputs and results),
* `proposal_events` for analytics logs.
  Enforce row‚Äëlevel security so proposals are readable only by token.

### 4. Persist proposals

Implement `POST /api/proposals` to recompute budgets/fees, insert a row into Supabase, and return `{ token }`. Add a `GET /api/proposals/[token]` route that returns a client‚Äësafe DTO (no hours, rates, or discounts). Wire the admin ‚ÄúGenerate Proposal‚Äù button to this route so it emits a copy‚Äëto‚Äëclipboard link.

### 5. Add analytics tracking

Introduce an event logger (e.g. `trackEvent()`), add a Supabase API route to record events, and log when a proposal is opened, when a customer views options, and when they click call‚Äëto‚Äëaction buttons. This feeds your future analytics dashboard.

### 6. Improve loading and error states

Replace indefinite spinners with skeleton UIs. Introduce a 10‚Äësecond timeout on data fetches and surface friendly error banners if Supabase or engine calls fail. These improvements align with the need for progressive disclosure and an informative UI.

### 7. Ensure mobile responsiveness

Test all cards and charts on mobile. Confirm that touch interactions work smoothly for donuts and sliders, and that long columns collapse into single‚Äëcolumn stacks. Strive for a time‚Äëto‚Äëinteractive under 3 seconds and charts that render in under 500 ms.

### 8. QA and acceptance gates

Before going live, run these checks:

* Math parity: ensure a 4,407 ft¬≤ remodel at \$195/ft¬≤ produces \$859,365.
* Client safety: verify the client‚Äëfacing HTML/JSON never includes the words ‚Äúhour,‚Äù ‚Äúrate,‚Äù ‚Äúdiscount,‚Äù or ‚Äúoverhead.‚Äù
* Performance: confirm the app meets your TTI and chart-render benchmarks.
* Basic e2e tests: cover generating a proposal, visiting the tokenized link, and ensuring no errors show up in the console.

### 9. Implement missing UX features

The Replit‚Äësource mock‚Äëup includes cost sliders for min/target/max PSF, an ‚ÄúAdvanced Settings & Overrides‚Äù panel, and PDF export. These features (plus email notifications) are not yet present. Prioritize these enhancements once core persistence and analytics are complete.

### 10. Prepare for deployment

Set `NEXT_PUBLIC_SUPABASE_URL`, `NEXT_PUBLIC_SUPABASE_ANON_KEY`, and `SUPABASE_SERVICE_ROLE_KEY` in your environment. Ensure your production database is provisioned and that admin routes are authenticated. Configure an email service for proposal alerts if you plan to integrate email notifications.

---

By completing these tasks‚Äîwhile following the narrative order defined in the blueprint and respecting client safety guidelines‚Äîyou will move from a functional prototype to a production‚Äëready platform that stores proposals, tracks engagement, and enforces proper security.
